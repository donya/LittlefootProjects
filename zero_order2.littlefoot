/*
Zero Order II - a generative system for the ROLI Lightpad Block
Donya Quick

Features generative algorithms based on Zero Order (generative piano system I made a while ago).
*/

/*
<metadata description="Random Music Machine" details="Random Pentatonic Music" target="Lightpad" tags="Controller;MIDI"  canEmbedModes="false">

    <variables>
        <variable name="channel" displayName="MIDI Channel" type="int" min="1" max="16" value="1" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
        <variable name="channel2" displayName="MIDI Channel" type="int" min="1" max="16" value="2" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
        <variable name="kickChannel" displayName="MIDI Channel" type="int" min="1" max="16" value="3" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
        <variable name="kickPitch" displayName="Kick Pitch" type="int" min="0" max="127" value="36" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
    </variables>

</metadata>
*/

int millis; // last time we generated something 
int milliThresh; // timer setting that will change based on X position
float lastTouchX; // last X touch position
float lastTouchY; // last Y touch position
float centerX; // last center of the generative setting (may differ from last touch)
float centerY; // last center of the generative setting (may differ from last touch)
bool fillMiddle; // whether tof ill the middle of the generative setting indicator
int lastRandPitch; // last pitch played
int lastBassPitch;
bool play; // are we generating? Default is false
int root; // scale root - you can change it by sending MIDI note on events to the block
int range; // lower end of the range, which responds to Z-axis (pressure)
bool push; // whether the pressure is enough that the range should change

float lastTouchX0; // for screen zero
float lastTouchY0; // for screen zero

// pitch history
int p0;
int p1;
int p2;
int p3;
int p4;
int p5;
int p6;
int p7;
int p8;
int p9;
int p10;
int p11;
int historyLength;
int filledPitches;

// for step sequencer
bool grid00;
bool grid01;
bool grid02;
bool grid03;
bool grid10;
bool grid11;
bool grid12;
bool grid13;
bool grid20;
bool grid21;
bool grid22;
bool grid23;
bool grid30;
bool grid31;
bool grid32;
bool grid33;

// misc other variables
int screen;
int position;
int screenCount;
int pianoOctave;
bool kick;


 
// API function called on start
void initialise()
{
    milliThresh=1000;
    millis = getMillisecondCounter();
    for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);
    lastTouchX = 1;
    lastTouchY = 1;
    lastTouchX0 = 1;
    lastTouchY0 = 2;
    lastRandPitch = -1; // negative means no pitch
    
    p0 = -1;
    p1 = -1;
    p2 = -1;
    p3 = -1;
    p4 = -1;
    p5 = -1;
    p6 = -1;
    p7 = -1;
    p8 = -1;
    p9 = -1;
    p10 = -1;
    p11 = -1;
    historyLength = 5;
    screen = 0;
    screenCount=5;
    pianoOctave = 3;
}

void checkGridTouch(float xRaw, float yRaw) {
    int x = int(14*xRaw/2);
    int y = int(14*yRaw/2);
    
    if (y<4) { // top row
        if (x<4)
            grid00 = !grid00;
        else if (x<8)
            grid01 = !grid01;
        else if (x<12)
            grid02 = !grid02;
        else
            grid03 = !grid03;
    } else if (y<8) { // 2nd row
        if (x<4)
            grid10 = !grid10;
        else if (x<8)
            grid11 = !grid11;
        else if (x<12)
            grid12 = !grid12;
        else
            grid13 = !grid13;
    } else if (y<12) { // 3rd row
        if (x<4)
            grid20 = !grid20;
        else if (x<8)
            grid21 = !grid21;
        else if (x<12)
            grid22 = !grid22;
        else
            grid23 = !grid23;
    } else { // bottom row
        if (x<4)
            grid30 = !grid30;
        else if (x<8)
            grid31 = !grid31;
        else if (x<12)
            grid32 = !grid32;
        else
            grid33 = !grid33;
    
    }
    
}

void checkGridTouchPiano(float xRaw, float yRaw) {
    int x = int(14*xRaw/2);
    int y = int(14*yRaw/2);
    if (y<4) { // top row: G#, A, A#, B / 8, 9, 10, 11 
        if (x<4)
            newPitch(8+pianoOctave*12);
        else if (x<8)
            newPitch(9+pianoOctave*12);
        else if (x<12)
            newPitch(10+pianoOctave*12);
        else
            newPitch(11+pianoOctave*12);
    } else if (y<8) { // 2nd row: E, F, F#, G / 4, 5, 6, 7
        if (x<4)
            newPitch(4+pianoOctave*12);
        else if (x<8)
            newPitch(5+pianoOctave*12);
        else if (x<12)
            newPitch(6+pianoOctave*12);
        else
            newPitch(7+pianoOctave*12);
    } else if (y<12) { // 3rd row: C, C#, D, D# / 0, 1, 2, 3
        if (x<4)
            newPitch(pianoOctave*12);
        else if (x<8)
            newPitch(1+pianoOctave*12);
        else if (x<12)
            newPitch(2+pianoOctave*12);
        else
            newPitch(3+pianoOctave*12);
    } else { // bottom row: octave controls
        if (x<4)
            pianoOctave--;
        else if (x>=12)
            pianoOctave++;
    }
    
}

void newPitch(int inPitch) {
    p11 = p10;
    p10 = p9;
    p9 = p8;
    p8 = p7;
    p7 = p6;
    p6 = p5;
    p5 = p4;
    p4 = p3;
    p3 = p2;
    p2 = p1;
    p1 = p0;
    p0 = inPitch;
    
    if (filledPitches <= historyLength) {
        filledPitches++;
    }
}

int pickPitch() {
    int r = getRandomInt(min(historyLength, filledPitches));
    r = min(r, historyLength);
    r = min(r, filledPitches); 
    if (r < 0 || filledPitches <= 0 || historyLength <=0)
        return -1;
    else if (r<=0)
        return p0;
    else if (r<=1)
        return p1;
    else if (r<=2)
        return p2;
    else if (r<=3)
        return p3;
    else if (r<=4)
        return p4;
    else if (r<=5)
        return p5;
    else if (r<=6)
        return p6;
    else if (r<=7)
        return p7;
    else if (r<=8)
        return p8;
    else if (r<=9)
        return p9;
    else if (r<=10)
        return p10;
    else 
        return p11;
}

// following along an axis
float follow(float inCoord, float lastTouchCoord, float thresh) {
    float retVal = lastTouchCoord;
    if (abs(inCoord-lastTouchCoord)<thresh)
            retVal = inCoord;
    else if (inCoord > lastTouchCoord)
            retVal += thresh;
    else if (inCoord < lastTouchCoord)
            retVal -= thresh;
    return retVal;
}

// What to do when the user pushes on the device
void handleTouch(int index, float x, float y, float z) {
    if (index==1) {
        centerX = x;
        centerY = y;
    }
    
    
    if (screen==0) {
        lastTouchX0 = follow(x, lastTouchX0, 0.05);
        lastTouchY0 = follow(y, lastTouchY0, 0.05);
        if (lastTouchY0 > 1.5)
            play = false;
        else
            play = true;
            
        int maxVal = 12;
        historyLength = int(maxVal*lastTouchX0/2);
        //log(historyLength);
    } else if (screen==1) {
        if (index==1) {
            lastTouchX = follow(x, lastTouchX, 0.02);
            lastTouchY = follow(y, lastTouchY, 0.02);
               
            
            if (z>=0.5) {
                //range = -int(3*(z-0.5));
                push = true;
            } else {
                push = false; 
            }
        }
    } else if (screen==3) { 
        addPressurePoint (0xFFFF00, x, y, z * 10.0); 
    }
}

// API function called at the onset of a touch series
void touchStart (int index, float x, float y, float z, float vz)
{
    if (index==1) {
        fillMiddle = true;
        
        if (screen==0) {
        // do nothing
        } else if (screen==1){
            if (index==1) {
                handleTouch(index,x,y,z);
           }
        } else if (screen==2) {
            checkGridTouch(x,y);
        } else if (screen==4) {
            emptyRect(0xFFFFFF, 1,1,14,14);
            int xPixel = int(15*x/2);
            int yPixel = int(15*y/2);
            if (xPixel > 4 && xPixel < 11 && yPixel > 4 && yPixel < 11) 
                kick = !kick;
        } else if (screen==3) {
            checkGridTouchPiano(x,y); // screen 3
        }
    } 
}

// API function called whenever the touch moves
void touchMove (int index, float x, float y, float z, float vz)
{
    if (index==1) {
        handleTouch(index,x,y,z);
    }
}

// API function called whenever the touch series ends
void touchEnd (int index, float x, float y, float z, float vz)
{
    if (index==1)
        fillMiddle = false;
            
    if (screen==0) {
        
    } else {
        if (index==1) {
	        handleTouch(index,x,y,z);
        }
    }
}

// API function called on each update
void repaint() 
{
    if (screen==0) {
        paintScreen0();
    } else if (screen==1) {
        paintScreen1();
    } else if (screen==2) {
        paintScreen2();
    } else if (screen==3){
        paintScreen3();
    } else {
        paintScreen4();
    }
    tickUpdate();
}

void paintScreen0() {
    blendRect(0x20000010, 0,0,15,15);
    drawTouch(0x40050000, 0x80100000, lastTouchX0, lastTouchY0, centerX, centerY);
    blendRect(0x20300000, 0,10,15,1);
    
    //float yPercent = 1.0 - lastTouchY0/2;
    
    milliThresh = 800-int(800*(2.0-lastTouchY0)/2);
    milliThresh = max(125,milliThresh);

}

void paintScreen1() {
    blendRect(0x20000000, 0, 0, 15, 15);
    drawTouch(0x40000000, 0x00FFFF, lastTouchX, lastTouchY, centerX, centerY);
    
}

void paintScreen2() {
    int gridColor = 0x77000000;
    int pipColor = 0xF0F000;
    int activeColor= 0x532000;
    blendRect(0x200F0000, 0, 0, 15, 15);
    blendRect(gridColor, 0, 3, 15, 1);
    blendRect(gridColor, 0, 7, 15, 1);
    blendRect(gridColor, 0, 11, 15, 1);
    blendRect(gridColor, 3, 0, 1, 15);
    blendRect(gridColor, 7, 0, 1, 15);
    blendRect(gridColor, 11, 0, 1, 15);
    
    // 0, 4, 8, 12
    if (position==0)
        emptyRect(pipColor, 0, 0, 4, 4);
    if (position==1)
        emptyRect(pipColor, 4, 0, 4, 4);
    if (position==2)
        emptyRect(pipColor, 8, 0, 4, 4);
    if (position==3)
        emptyRect(pipColor, 12, 0, 4, 4);
    if (position==4)
        emptyRect(pipColor, 0, 4, 4, 4);
    if (position==5)
        emptyRect(pipColor, 4, 4, 4, 4);
    if (position==6)
        emptyRect(pipColor, 8, 4, 4, 4);
    if (position==7)
        emptyRect(pipColor, 12, 4, 4, 4);
    if (position==8)
        emptyRect(pipColor, 0, 8, 4, 4);
    if (position==9)
        emptyRect(pipColor, 4, 8, 4, 4);
    if (position==10)
        emptyRect(pipColor, 8, 8, 4, 4);
    if (position==11)
        emptyRect(pipColor, 12, 8, 4, 4);
    if (position==12)
        emptyRect(pipColor, 0, 12, 4, 4);
    if (position==13)
        emptyRect(pipColor, 4, 12, 4, 4);
    if (position==14)
        emptyRect(pipColor, 8, 12, 4, 4);
    if (position==15)
        emptyRect(pipColor, 12, 12, 4, 4);
    
        
    if (grid00)
        fillRect(activeColor, 0, 0, 3, 3);
    if (grid01)
        fillRect(activeColor, 4, 0, 3, 3);
    if (grid02)
        fillRect(activeColor, 8, 0, 3, 3);
    if (grid03)
        fillRect(activeColor, 12, 0, 3, 3);
    if (grid10)
        fillRect(activeColor, 0, 4, 3, 3);
    if (grid11)
        fillRect(activeColor, 4, 4, 3, 3);
    if (grid12)
        fillRect(activeColor, 8, 4, 3, 3);
    if (grid13)
        fillRect(activeColor, 12, 4, 3, 3);
    if (grid20)
        fillRect(activeColor, 0, 8, 3, 3);
    if (grid21)
        fillRect(activeColor, 4, 8, 3, 3);
    if (grid22)
        fillRect(activeColor, 8, 8, 3, 3);
    if (grid23)
        fillRect(activeColor, 12, 8, 3, 3);
    if (grid30)
        fillRect(activeColor, 0, 12, 3, 3);
    if (grid31)
        fillRect(activeColor, 4, 12, 3, 3);
    if (grid32)
        fillRect(activeColor, 8, 12, 3, 3);
    if (grid33)
        fillRect(activeColor, 12, 12, 3, 3);   
}

void paintScreen3() {
    blendRect(0x20000000, 0, 0, 15, 15);
    int whiteKeyColor = 0x555555;
    int blackKeyColor = 0x5555FF;
    
    drawPressureMap();
    fadePressureMap(); 
    
    fillRect(blackKeyColor, 0, 0, 3, 3);
    fillRect(whiteKeyColor, 0, 4, 3, 3);
    fillRect(whiteKeyColor, 0, 8, 3, 3);
    fillRect(whiteKeyColor, 4, 0, 3, 3);
    fillRect(whiteKeyColor, 4, 4, 3, 3);
    fillRect(blackKeyColor, 4, 8, 3, 3);
    fillRect(blackKeyColor, 8, 0, 3, 3);
    fillRect(blackKeyColor, 8, 4, 3, 3);
    fillRect(whiteKeyColor, 8, 8, 3, 3);
    fillRect(whiteKeyColor, 12, 0, 3, 3);
    fillRect(whiteKeyColor, 12, 4, 3, 3);
    fillRect(blackKeyColor, 12, 8, 3, 3);
    
    
    fillRect(0xFF0000, 1, 12, 2, 3);
    fillRect(0xFF0000, 0, 13, 1, 1);
    fillRect(0x0000FF, 12, 12, 2, 3);
    fillRect(0x0000FF, 14, 13, 1, 1);
}

void paintScreen4() {
    int edgeColor = 0x20FF0000;
    blendRect(0x20000000, 0, 0, 15, 15);
    emptyRectBlend(edgeColor,4,4,8,8);
    if(kick)
       blendRect(0x20500030, 4, 4, 7, 7); 
}

void checkPlayGrid() {
    if (grid00 && position==0)
        playPip();
    if (grid01 && position==1)
        playPip();
    if (grid02 && position==2)
        playPip();
    if (grid03 && position==3)
        playPip();
    if (grid10 && position==4)
        playPip();
    if (grid11 && position==5)
        playPip();
    if (grid12 && position==6)
        playPip();
    if (grid13 && position==7)
        playPip();
    if (grid20 && position==8)
        playPip();
    if (grid21 && position==9)
        playPip();
    if (grid22 && position==10)
        playPip();
    if (grid23 && position==11)
        playPip();
    if (grid30 && position==12)
        playPip();
    if (grid31 && position==13)
        playPip();
    if (grid32 && position==14)
        playPip();
    if (grid33 && position==15)
        playPip();
}

void playPip() {
    if (play && filledPitches>0) {
        int tempPitch = pickPitch();
        if (tempPitch >=0) {
            lastBassPitch = 36+tempPitch%12;
            sendNoteOn(channel2-1,lastBassPitch,80+getRandomInt(40));
        }
    }
}


void emptyRect(int edgeColor, int x, int y, int w, int h) {
    fillRect(edgeColor,x-1,y-1,w+1,1);
    fillRect(edgeColor,x-1,y-1,1,h+1);
    fillRect(edgeColor,x-1,y+h-1,w+1,1);
    fillRect(edgeColor,x+w-1,y-1,1,h+1);
}

void emptyRectBlend(int edgeColor, int x, int y, int w, int h) {
    blendRect(edgeColor,x-1,y-1,w+1,1);
    blendRect(edgeColor,x-1,y-1,1,h+1);
    blendRect(edgeColor,x-1,y+h-1,w+1,1);
    blendRect(edgeColor,x+w-1,y-1,1,h+1);
}

// what to draw each frame
void drawTouch(int touchColor, int borderColor, float x1, float y1, float xc, float yc) {
    if (lastTouchX >= 0 && lastTouchY >=0) {
        int x = int(x1*7);
        int y = int(y1*7);
        int x2 = int(xc*7);
        int y2 = int(yc*7);
        int edgeColor = borderColor;
        if (push && screen==1)
            edgeColor = 0x0000FF;
        blendRect(touchColor, x,y,2,2);
        fillRect(edgeColor,x-1,y-1,4,1);
        fillRect(edgeColor,x-1,y,1,3);
        fillRect(edgeColor,x-1,y+2,4,1);
        fillRect(edgeColor,x+2,y,1,2);
        if (fillMiddle)
            fillRect(0xFFFF00, x2,y2,2,2);
    } 
}

// API function called when the side button is pushed
void handleButtonDown (int index) {
    if (screen==0) {
        //play = !play;
        if (!play && lastRandPitch>=0) // if we stop playing and played a pitch...
            sendNoteOff(channel,lastRandPitch,0); // we better turn it off!
    }
    screen = (screen+1)%screenCount;
}

// API function called when the block receives a MIDI message from an external device
void handleMIDI(int b0, int b1, int b2) {
    int type = b0 & 0xF0;
    int chan = b0 & 0x0F;
    if (type==144) // note on check
        //root = b1%12;
        newPitch(b1);
}

// Make it pretty when a note is generated by lighting up a pixel
void tickUpdate() {
    int t = getMillisecondCounter(); // what time is it now?
    if (t - millis >= milliThresh) { // have we waited long enough to generate a new note?
        position = (position+1)%16;
        
        sendNoteOff(kickChannel-1,kickPitch,120);
        if (kick && play && position%4==0) {
            sendNoteOn(kickChannel-1,kickPitch,120); // play the note
            if (screen==4) {
                emptyRect(0xFFFF00,4,4,8,8);
                emptyRect(0xFFFF00,3,3,10,10);
            }
        }
        
        millis = t; // record the current time
        int color = getRandomInt(0xFFFFFF); // pick a random color
        if (lastRandPitch>=0) // did we play a pitch previously?
            sendNoteOff(channel-1,lastRandPitch,0); // if yes, then we need to turn it off
        if (lastBassPitch>=0) // did we play a pitch previously?
        sendNoteOff(channel2-1,lastBassPitch,0); // if yes, then we need to turn it off
        //lastRandPitch = fitMajorPenta(root, getRandomInt(30)+70+range); // calculate a new pitch
        int tempPitch = pickPitch();
        int oct = int(3*lastTouchX/2);
        if (push)
            oct -= 2;
        lastRandPitch = tempPitch + 12*oct;
        int volCap = min(120, 40+getRandomInt(int(100*lastTouchY/2)));
        int vol = 125-(volCap/2 + getRandomInt(volCap/2));
        //int vol = 27+100-int(100*lastTouchY/2); // volume is based on Y axis
        if (play) {
            if (lastRandPitch >= 0 && filledPitches > 0) {
                if (lastRandPitch >=0) {
                    fillPixel(color, getRandomInt(15), getRandomInt(15)); // light it up!
                    sendNoteOn(channel-1,lastRandPitch+12,vol); // play the note
                    
                }
            }
            checkPlayGrid();
        }
    }
}
